from lxml.etree import fromstring, tostring
from genReport import GenReprt
from Analyse import Technics
from sys import argv
import json, xmljson
import psutil
import base64
import subprocess
import os
import time


class Main(object):
    
    def __init__(self,pathToXml=False):
        self.pathToXml = pathToXml
    
    def loadResult(self,xmlpath):
        return json.loads(
            json.dumps(xmljson.badgerfish.data(
            fromstring(
                open(xmlpath,"rb").read())))
        )
    
    def cmd(self,command,byline=False):
        if byline:
            return [i.decode(errors="replace").strip() for i in subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout.readlines()]
        return subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).stdout.read().decode(errors='replace').strip()
    
    def genReportAnalyse(self,t=3*60):
        xmlpath = self.startMonitor(t)
        result = self.loadResult(xmlpath)
        analysed = Technics(list(result['procmon']["eventlist"]['event'])).analyse()
        GenReprt(analysed).genReport().genReportAnalyse()

    def killproc(self):
        PROCNAME = ["Procmon","Procmon64"]
        for i in psutil.process_iter():
            if [n for n in PROCNAME if n in i.name()]:
                i.kill()
                
    def getProcMonLog(self):
        while True:
            if len([i for i in psutil.process_iter() 
                    if [n for n in ["Procmon","Procmon64"] 
                        if n in i.name()]]
                ) == 0:
                if self.pathToXml:
                    return self.pathToXml
                return os.path.join(os.getcwd(),"Procconf","procmxml.xml")
            time.sleep(1)
                

    def startMonitor(self,scanTime):
        self.cmd(" ".join(["powershell -enc ",
                base64.b64encode(' '.join(["procmon.exe /Quiet /Minimized /LoadConfig",
                        '"'+os.path.join(os.getcwd(),"Procconf","ProcmonConfiguration2.pmc")+'"',
                        "/BackingFile ",
                        '"'+os.path.join(os.getcwd(),"Procconf","proclogmon.pml")+'"']
                    ).encode("utf_16_le")
                ).decode()]
            )
        ) 
        time.sleep(scanTime)
        self.killproc()
        return self.getProcMonLog()

def main():
    pathxml = False
    out = False
    t = False
    filt = False
    for i in range(len(argv)):
        if argv[i] == '-f':
            filt = argv[i+1]
        if argv[i] == '-t':
            t = argv[i+1]
        if argv[i] == '-out':
            out = argv[i+1]
        if argv[i] == '-x':
            pathxml = argv[i+1]
    Main().genReportAnalyse(t=t)

Main().genReportAnalyse(120)
    
